/* Reset */
fieldset,
legend {
  /* 모든 속성을 선택한다. 그리고 unset */
  all: unset;
  /* 모든 속성이 초기화되면 위험하다. 기본 스타일이 유지되면 좋은 경우도 있으니. -> 사용자 에이전트에 여전히 관심을 가져야 한다. */
  display: block;
}

/* all: unset을 통해 최대한 담백한 버튼 제작 -> 기본으로 제공하는 웹 접근성관련 주요 기능들의 시각적 특성이 사라짐. 하지만은 HTML 요소 고유의 기능, submit 또는 focus 기능 자체는 유지 되어있음. */
button {
  all: unset;
  display: block;
}

/* input과 select등은 공공 UI다. 반복해서 쓰이는게 기본값 */
/* 그래서 초기화부터 진행 -> 바로 뒤이어 디자인 평준화를 진행 */ 
input, select, textarea {
  all: unset;
}

/* 디자인 평준화, 해당 공공 UI를 평준화하자!(브라우저종류 관계 없이!) */
select,
input[type="text"],
input[type="password"],
input[type="email"] {
  /* block이 되더라도 */
  display: block;
  /* width: auto가 컨테이닝 블록 기준으로 가득차지 않는다. */
  width: 100%; /* 억지로 100% 때려 줘야 함! */

  /* 피그마 디자인을 참고하여 재조정 */
  height: var(--input-height);
  line-height: var(--input-height);

  /* 텍스트의 안정적인 표현을 위해 좌우 padding */
  padding: 0 var(--input-padding);
  /* width: 100%에 padding이 플러스 알파 됨 -> 고것을 막겠당. */
  box-sizing: border-box;
}

/* 실제 존재하지만, 마우스 액션도 x, 차지하고 있는 공간도 x 해서 안정성을 확보 */
input[type="radio"],
input[type="checkbox"] {
  pointer-events: none;
  position: absolute;
}

/* textarea의 기본 디자인 재구축 (평준화) */ 
textarea {
  display: block;
  width: 100%; 
  padding: var(--input-padding);
  box-sizing: border-box;
}

/* CSS Variables */
:root {
  --font-ko: "Noto Sans KR", sans-serif;

  /* Colors */
  --color-primary: #70C994;

  /* 전역 변수, 모든 input이 가지고 있는 초기의 스타일링 */
  --input-height: 44px;
  --input-fs: 1.4rem;
  --input-padding: 14px;

  --effect-focus: 0 0 0 4px rgb( 131 208 156 / .25 );
}

/* Typography */
:root {
  font-family: var(--font-ko);
  font-size: 62.5%; /* 기본 폰트 16px의 62.5% -> 10px */
}

body {
  /* root의 font-size: 1.4배 */
  font-size: 1.4rem;
}

/* Commons */
/* input[type="text"]를 한번 감싸는 역할, input 자체의 스타일을 커스텀을 하면 다양한 입력 필드 유형을 소화하기 어렵기 때문에 추가. */
.field {
  border: 2px solid #ddd;
  border-radius: 4px;
  transition: all .4s;
}

/* :has()는 꿀이지만, 현재 상황에서는 모든 input, textarea 등 입력 필드 전체 대상으로 해당 focus가 표현되어야 하기 때문에 focus전용으로 나온 :focus-within을 사용하는것이 합리적 */ 
.field:focus-within {
  border-color: var(--color-primary);
  box-shadow: var(--effect-focus);
}

.field.type_small {
  /* 지역 변수 : 전역 변수값을 사용하지 않고 .field.type_small 마크업 내에서 사용되는 지역 변수를 만들어 입력창 커스텀 (좀 작은 버전!) */
  --input-height: 32px;
  --input-fs: 1.1rem;
  --input-padding: 10px;
}

.choice {
  display: inline-flex;
  gap: 10px;
}

/* 
  checkbox와 radio button은 같은 계열이당. 
  그래서 .choice라는 공통의 클래스를 만들었다! 
*/
.choice::before {
  content: ' ';
  width: 20px;
  height: 20px;
  border: 2px solid #ddd;
  border-radius: 4px;
  background-repeat: no-repeat;
  background-position: center 20px;
  transition: all .4s;
}

/* checkbox 일반 상태 */
.choice.type_checkbox::before {
  background-image: url(images/check.svg);
}

/* checkbox 선택된 상태 */
.choice.type_checkbox:has(:checked)::before {
  background-position: center center;
}

/* radio button 일반 상태 */
.choice.type_radio::before {
  border-radius: 50%;

  /* 결국 이미지로 해당 부분 디자인 교체 */
  background-position: center center;
  background-image: url(images/circle.svg);
  background-size: 0;
}

/* radio button 선택된 상태 */
.choice.type_radio:has(:checked)::before {
  background-size: 8px;
}

.choice:has(:focus)::before {
  border-color: var(--color-primary);
  box-shadow: var(--effect-focus);
}

/* Component */
.wrapper {
  max-width: 600px;
  margin: 100px auto;
}